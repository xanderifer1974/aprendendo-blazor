@page "/"
@inject HttpClient http

<h1>Tarefas</h1>

<hr />


@if (tarefas == null)
{
    <p>Carregando...</p>
}
else if (!tarefas.Any())
{
    <p>Ainda não existem tarefas</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <td>Ação</td>
                <th>Data</th>
                <th>Descricao</th>
                <th>Concluida</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in tarefas)
            {
                <tr>
                    @*Falta ver a lógica*@
                    <td><button @onclick="@(() =>RemoverTarefa())"><i class="oi oi-trash"></i></button></td>
                    <td>@item.DataCriacao</td>
                    <td>@item.Descricao</td>
                    <td><input type="checkbox" @bind="item.Concluida" />@item.Concluida</td>                    
                </tr>
            }
        </tbody>
    </table>
}

@if (tarefas != null)
{
    <div class="form-group">
        <label>Tarefa</label>
        <input type="text" placeholder="Informe a tarefa" @bind="novaTarefa" />
        <button class="btn btn-primary" @onclick="AdicionarNovaTarefa">Registrar Tarefa</button>
    </div>
}



@code {

    protected override async Task OnInitializedAsync()
    {
        tarefas = await http.GetFromJsonAsync<List<Tarefas>>("dados/tarefas.json");
    }
    private string novaTarefa = "";

    private List<Tarefas> tarefas = new List<Tarefas>();

    void AdicionarNovaTarefa()
    {
        if (!string.IsNullOrEmpty(novaTarefa))
        {
            tarefas.Add(new Tarefas
                {
                    DataCriacao = DateTime.Now,
                    Descricao = novaTarefa,
                    Id = Guid.NewGuid()
                });
        }
    }

    void RemoverTarefa()
    {
        
    }


}
